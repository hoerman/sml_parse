#[derive(Clone, Debug, PartialEq)]
pub enum SmlUnit {
    Year,
    Mont,
    Week,
    Day,
    Hiur,
    Minute,
    Second,
    Degree,
    DegreeCelsius,
    Currency,
    Meter,
    MeterPerSecond,
    CubicMeter,
    CubicMeterCorrected,
    CubicMeterPerHour,
    CubicMeterPerHourCorrected,
    CubicMeterPerDay,
    CubicMeterPerDayCorrected,
    Litre,
    Kilogram,
    Newton,
    Newtonmeter,
    Pascal,
    Bar,
    Joule,
    JoulePerHour,
    Watt,
    VoltAmpere,
    Var,
    WattHour,
    VoltAmpereHour,
    VarHour,
    Ampere,
    Coulomb,
    Volt,
    VoltPerMetre,
    Farad,
    Ohm,
    OhmResistivity,
    Weber,
    Tesla,
    AmperePerMetre,
    Henry,
    Hertz,
    InverseWattHour,
    InverseVarHour,
    InverseVoltAmpereHour,
    VoltSquaredHours,
    AmpereSquaredHours,
    KilogramPerSecond,
    Kelvin,
    InverseVoltSquaredHours,
    InverseAmpereSquaredHours,
    InverseQubicMetre,
    Percentage,
    AmpereHour,
    EnergyPerVolume,
    CalorificValue,
    MassDensity,
    DynamicViscosity,
    Reserver,
    Other,
    Count,
    UnknownUnit(u8),
}

pub fn sml_unit_from_u8(unit_val: u8) -> SmlUnit
{
    SmlUnit::UnknownUnit(unit_val)
}
